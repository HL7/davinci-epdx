@startuml
skinparam svgDimensionStyle false
autonumber
participant "Payer2 | New Payer | Requesting Payer" as Payer2
participant "Payer1 | Old Payer | Receiving Payer" as Payer1
participant "Payer Directory | Certificate Authority" as PayerDirectory
== Connection Intitialization ==
group #LightGreen Step 1a: Verify Exchange, establish mutual TLS, and verify trust.
	Payer2 -> PayerDirectory : Query
	PayerDirectory -> Payer2 : Return endpoint, mutual TLS public cert,
	Payer2 -> Payer2 : Verify Cert
	Payer2 -> Payer1 : Establish Mutual TLS
	Payer1 -> PayerDirectory : Query mutual TLS Public Cert
	PayerDirectory ->> Payer1 : Return mTLS public cert
	Payer1 -> Payer1 : Verify Cert
end
group #lightGreen Step 1b: OAuth 2.0 Dynamic Registration via mTLS connection
	Payer2 -> Payer1 : Request registration (JWT with registration details)
  Payer1 -> Payer2 : Return Client Credentials (ClientID/ClientSecret)
end

== Establish Shared Member Connection ==
group Step 2a: Get Operation Token
	Payer2 -> Payer1 : Use OAuth2.0 token endpoint to request access to $MemberMatch operation only
  note right
  	Token endpoint issues access token using Payer2 OAuth Credentials
  endnote
  Payer1 -> Payer2 : Return access token
end
group Step 2b: Establish common member - secure transaction
	Payer2 -> Payer1 : Send bundle (Patient Demographics, Coverage & Consent) to $MemberMatch operation
	Payer1 -> Payer1 : Verify member
  Payer1 -> Payer1 : Store or Compute Consent (all / non-sensitive) for Member
  note right
  Member: ID
  Payer: ID
  Policy: all | non-sensitive
  Consent Period: start, end
  endnote

	Payer1 -> Payer1 : Generate Unique MemberMatch ID for Payer2
  note right
    Payer1 may determine concurrent coverage is in effect
    and covered by member consent to trigger reciprocal
    app registration and $MemberMatch request
  endnote

  Payer1 -> Payer2 : Creates Unique (to Payer2) MemberMatch ID and returns in response
  note right
  	Payer2 receives the Unique MemberMatch ID
    that is unique to Payer2
    from Payer1.
    Identifier is only returned if
    member is matched and consent
    can be complied with per
    date and policy constraints.
  endnote
end

group Step 3: Request Access and refresh token
	Payer2 -> Payer1 : Use OAuth2.0 token endpoint to request access using Unique MemberMatch ID
  note right
  	Token endpoint matches to member using Payer2 unique MemberMatch ID
  endnote
  Payer1 -> Payer2 : Return access and refresh token
end
== Data Requests ==
group #LightBlue Step 4: Exchange PDEX (USCDI) Information via API
	Payer2 -> Payer1 : Get access token using refresh token, if necessary
  Payer2 -> Payer1 : Use access token to access API
	Payer1 -> Payer2 : Return $everything-pdex or incremental data as appropriate
  note right
  	Use retrieval method, as defined in use case scenarios, such as:
      1.) Individual search against each USCDI resource
      2.) $everything operation
      3.) asynchronous Bulk FHIR methods.
  endnote
end
@enduml
