@startuml
skinparam svgDimensionStyle false
participant "Payer2 | New Payer | Requesting Payer" as Payer2
participant "Payer1 | Old Payer | Receiving Payer" as Payer1
== Connection Intitialization ==
group #lightGreen Step 1: OAuth 2.0 Dynamic Registration or alternative
	Payer2 -> Payer1 : Request registration (JWT with registration details)
	note left
  	Payer2 submits JWK Set with
    service registration details
  endnote
  Payer1 -> Payer2 : Return Client Credentials (ClientID/ClientSecret)

end
== Secure Transaction Capability Established ==

== Bulk Member Match ==
group Step 2a: Get $MemberMatch Operation Token
	Payer2 -> Payer1 : Use OAuth2.0 token endpoint to request access \nto $MemberMatch operation only
  Payer1 -> Payer2 : Return access token
  note right
  	Token endpoint issues access token using
    Payer2 OAuth Credentials
  endnote
end
group Step 2b: Establish Common Members - secure operation
	Payer2 -> Payer1 : Send bundle of bundles (Patient Demographics, \nCoverage & Consent for each member) to $MemberMatch operation
	Payer1 -> Payer1 : Match EACH member
  Payer1 -> Payer1 : Store or Compute Consent \n(all / non-sensitive) for EACH Member
  note right
  Member: ID
  Payer: ID (Client Credential)
  Policy: all | non-sensitive
  Consent Period: start, end
  This information will be need to be checked
  when Access Token is issued in Step 3.
  An active consent information will only be stored if the Policy
  Scope can be complied with. An inability to comply with the scope
  will lead to a 422 error being returned from the $member-match for the
  member.
  endnote
  note left
  Successful Match results in Patient/{ID} for Member
  being appended to a dynamically created Group record by Payer 1.
  endnote
	Payer1 -> Payer2 : Return Group Identifier (Group FHIR ID).
  note right
    This process assumes Payer1 provides Patient/{ID} for
    each member that crosses all relevant
    contract arrangements.

    Payer1 may determine concurrent coverage is in effect
    and covered by member consent to trigger reciprocal
    app registration and $MemberMatch requests to Payer 2.

  	Payer2 receives the Group/{ID} from Payer1.
    The Group/{ID} contains matched members where consent
    can be complied with per date and policy constraints.
  endnote
end

group Step 3: Request Access token forGroup/{ID}
	Payer2 -> Payer1 : Use OAuth2.0 token endpoint to \nrequest access using Group/{ID}/$pdex-p2p-export
  Payer1 -> Payer2 : Return access token
end
== Data Requests ==
group #LightBlue Step 4: Exchange PDex (USCDI) Information via API
  Payer2 -> Payer1 : Use Access Token to call \n/Group/{ID}/$pdex-p2p-export operation.
	Payer1 -> Payer2 : Performs Async operation as per \nFHIR Bulk Data Export specification to return bundle to requesting Payer
  note right
  	Operation will validate Consent Scope and Valid Consent Period.
    This will be based upon data saved during Member-Match process for
    each Member.
    Payer1 should check whether Member has provided more recent over-riding
    consent instruction directly.
  endnote
end
@enduml
